---
layout: post
title:  "Javascript一些简单的基础"
date:   2017/03/03 15:03:42
categories: javascript
---

# 一. 数据类型
## 1. 简单数据类型
  1. number
  2. string
  3. boolean
  4. null 只有一个值，就是它本身，表示一个空对象指针
  5. undefined 只有一个值，就是它本身

## 2. 复杂数据类型
1. Object
    - Function
    - Array
    - Date
    - RegExp

## 3. 隐式类型转换

```
'123' + 0 //123,转换成number类型
123 + '' //'123',转换成string类型
'3' + 1 //'31',字符串拼接string类型
'3' - 1 //2, 转换成number类型

'1' == 1//true
null == undefined //true
0 == false //true
NaN == NaN //false，自己都不等于自己

0 === false// false
'1' === 1 //false
```

## 4. 包装对象
1. String
2. Number
3. Boolean

## 5. 类型检测
1. typeof

```
//适合基本类型和function，除了null外
typeof NaN // "number"
typeof (undefined) // "undefined"
typeof Function //"function"
typeof null // "object"
```

2. instanceof

```
//用于判断对象是否属于某构造器，判断是否有继承关系。
//Array,Date,RegExp等用于判断类型
obj instanceof Object
[] instanceof Array ===true //true
```

3. Object.prototype.toString
4. constructor
5. duck type

# 二、表达式和运算符
## 1. 表达式：

1. 原始表达式
    - 常量、直接量: 3.1415 , 'str'
    - 关键字： null , this , true
    - 变量：10 * 10  复合表达式
2. 数组、对象的初始化表达式
    - [1,2]   // 等价于new Array(1,2)
    - [1,,2]  // 等价于[1,undefined,2]
    - {a: 1, b: 2} // 等价于var a = new Object() a.a=1;a.b=2
3. 函数表达式
    - var fnc = function(){}
    - function fn(){}
    - (function(){})()
4. 属性访问表达式
    - var o = {a: 1} // o.a 或 o['a']
5. 调用表达式
    - func()
6. 对象创建表达式
    - new Func(1, 2)
    - new Object

## 2.运算符：

1. 一元表达式： +num 
2. 二元表达式： num1 + num2
3. 三元表达式： a ? b : c
4. 赋值： a +=1
5. 比较： a == b
6. 算术:  a - b
7. 位：a | b
8. 逻辑：exp && exp2
9. 字符串: 'a' + 'b'
10. 特殊: 
    - delete obj.a
    - var val=(1,2,3)//3  取最右
    - var obj= {a: 1} delete obj.a   obj.a //delete删除返回undefined
    - window.x = 1 'x' in window //in运算符 true
    - this
    - void 0//不管是0还是什么都返回 undefined

```
function Foo(){}
Foo.prototype.x = 1
var obj = new Foo() 
obj.x //1
obj.hasOwnProperty('x')//false 判断x是否在对象上
obj.__peoto__.hasOwnProperty('x')//true  判断x是否在原型上
```

# 三、语句
## 1.block语句

```
//用于组合语句,一般结合for if while之类的
{
 var a=1
 console.log(a)
}
//没有块级作用域 
  for(var i=0; i<10; i++){} 
  等于
  var i=0 
  for(; i<10; i++){}
{
  var a=1//在块外面一样可以访问
}
//function里面定义的，外面的无法访问，有函数作用域，并不是块级作用域
function(){
var a=1//外部无法访问到
}

function foo(){
var a = b = 1

}
foo()
console.log(a)//undefined  a是函数作用域内部
console.log(b)//1   b是全局，并没有var声明
```

## 2.try...catch

```
//catch或者finally必须写一个不能只有try
//也可以catch和finally都写
//catch用于捕获错误
try{
  throw "test"
}catch(ex){
  console.log(ex)
}finally{
  console.log('finally')
}
```

## 3. 函数、swich、循环
1. function

```
//函数声明，可以在它之前调用他
a()//true
function a(){}

//函数表达式，不可以在他之前调用打
b()//TypeError: b is not a function
var b = function(){}
```

2. for ... in

```
//for in遍历是不按顺序的
//受原型链影响
var obj={a: 1, b: 2}
var x
for(x in obj){
}
```

3. switch

```
//条件分支语句
var val = 2
switch(val){
    case 1:
        console.log(1);
        break;
    case 2:
        console.log(2);
        break;
    default:
        console.log(3);
        break;
}//2

switch(val){
    case 1:
        console.log(1);
    case 2:
        console.log(2);
 
    default:
        console.log(3);
}//2, 3
```

4. while、do while、for、with

```
while(true){
   //do sth
}

do{
    //just 1
}while(is true){

}

var i
for(i=0; i<10; i++){
    //do sth
}

//strict模式下已经禁止,不建议使用
with({x:1}){
    console.log(x)
}
```

## 4.strict严格模式

```
//严格模式的使用
'use strict';
function(){

}
//严格模式下，未声明的变量不能使用，不像非严格模式，会在window下创建
```

# 四、对象

### 1. 对象属性是无序的，每个属性都有一个字符串key和对应的value
### 2. 对象属性是可以动态添加和删除的
### 3. 创建对象

```
//1.对象创建-字面量
var obj1 = {x:1, y:2, z:{ a:2, b:3}}

//2.对象创建-new/原型链
function foo(){}
foo.prototype.x = 3//在foo原型上添加

var obj1 = new foo()
obj1.a = 1
obj1.b = 2

obj1.a //1
obj1.b //2
obj1.x //3   在obj1上没有x属性，它会通过原型链__proto__在foo上找到，如果再找不到会去Object.prototype上找,再向上是null,找不到就返回undefined
obj1.hasOwnProperty('x') //false 说明x属性并不在obj1上
obj1.x = 4 // 这时候会添加一个x，而不是修改的foo.prototype.x
obj1.x // 4
obj1.hasOwnProperty('x') // true 可以发现obj1已经有了x属性
foo.prototype.x //3 foo原型上的x和一开始的值一样，并没有受影响 
obj.x = undefined //undefined 并不是没有x，而是x的值改成了undefined
delete obj1.x //true  成功删除了obj1身上的x
obj1.x //3   删掉obj1身上的x,又会通过原型链找到foo.prototype，所以是3


//3.创建对象-Object.create
var obj1 = Object.cretae({a:1})
obj1.a //1
obj1.hasOwnProperty('a') //false 在原型链上继承而来，并非它本身拥有a属性
```

### 4. 属性操作
1. 读写读写对象属性

    ```
    //对象字面量
    var obj1 = {x: 1, y: 2}
    obj1.x //1
    obj1['y'] //2

    //遍历的方法
    var obj2 = {x1: 1, x2: 2, x3: 3 ...}
    for(var i=1; i<4; i++){
        console.log(obj2['x'+1])
    }

    or

    //for in 会有可能出问题，会把原型上的东西打出来，而且是无序的
    for(var i in obj2){
        console.log(obj2[i])
    }

    //写入
    var obj3 = {x:1}
    obj3.y = 2
  
    ```

2. 属性删除

    ```
    //删除属性
    var person = {age: 22, title: 'title'}
    delete person.age //true
    delete person['age']//true
    person.age //undefined
    delete person.age //true 虽然已经删除，再次删除依然会返回true,只是并没有做任何事

    delete Object.prototype //false prototype是无法被删除的，会返回false

    ```

3. 属性检测

    ```
    //可以使用in来判断属性是否存在
    var obj = {x:1, age: 3}
    'age' in obj //true
    'a' in obj //false
    'toString' in obj //true 原型上有
    ```

4. 枚举

    ```
    var obj = Object.create(o)
    obj.a = 4

    for (var key in obj){
        if(obj.hasOwnProperty(key)){//这么写可以防止原型链上的s属性也被打印出来
            console.log(key)//a
        }
    }
    ```

5. 使用get/set 读写

    ```
    //get and set
    var man = {
        name: 'Leo',
        age: 23,
        get age(){
            return new Date().getFullYear()-1999
        },
        set age(val){
            console.log('Age can\'t be set to' + val)
        }
    }
    console.log(man.age)//17  2016年-1999
    man.age = 100 //Age can't be set to 100
    console.log(man.age)//17

    ```

# 五、数组

### 1. 创建和操作数组

```
//数组是值的有序集合。每个值叫做元素，每个元素都有位置编号，就是索引。javascript的数组是弱类型，可以含有不同类型的元素，甚至是数组和对象。
//数组最长不能超过  2^32-1   4294967295
//创建数组-字面量
var arr = [1, true, undefined, [1,2,3], {x:1}, null]


//创建数组-new Array()
var arr1 = new Array(10)//10个undefined
var arr2 = new Array(true,false,1,'str')
var arr3 = Array(true,false,unll)
var arr4 = [a,,b]//a,undefined,b
var arr5 = [,,]//undefined,undefined  数组允许最后一个元素后面还有一个逗号

//数组读写
var arr = [1, 2, 3, 4, 5]
arr[1]//2
arr.length//5
arr[5] = 6
arr.length//6

//增加
var arr = [1,2,3]
arr.push(4)
arr//[1, 2, 3, 4]
arr[arr.length] = 5
arr//[1, 2, 3, 4, 5]

//删除
arr1 = [1, 2, 3, 4]
delete arr1[1]
arr1[1]//undefined
arr1.length//4
2 in arr1//false
arr1//[1, undefined, 3, 4]
arr1.length -=1 //删除了最后一个 [1, undefined, 3]
arr1.pop()
arr1//[1, undefined]

arr1.shift()//删除第一个，索引0
arr1//[undefined]
```

### 2. 数组迭代

```
//for
var arr =[1,2,3,4,5,6]
for(var i=0; i<arr.length; i++){
    console.log(arr[i])
}

//for in 
var i = 0
for(i in arr){
    console.log(arr[i])
}
//由于for in会打印出原型上的属性,且无序
Array.prototype.x ='a'
for(i in arr){
    console.log(arr[i])
}
//1,2,3,4,5,6,a
//因此要判断一下
for(i in arr){
    if(arr.hasOwnProperty(i)){
        console.log(arr[i])
    }
}

```

### 3. 二维数组

```
var arr=[[0,1],[2,3],[4,5]]
var i=0, j=0
var row
for(; i < arr.length; i++){
    row =arr[i]
    console.log('row ' + i)
    for(; j < row.length; j++){
        console.log(row[j])
    }
}
//row 0   0 1
//row 1   2 3
//row 2   4 5
```

### 4.数组方法


数组，数组的原型上定义有不少数组方法

`[] || new Array()`

方法 |说明|
----|----|---
Array.prototype.join | 用给定的字符拼接成字符串 | 
Array.prototype.reverse | 逆序 |
Array.prototype.sort | 排序 |
Array.prototype.concat | 数组合并 |
Array.prototype.slice | 切片|
Array.prototype.splice | 胶接，可删除可添加 |
Array.prototype.forEach | 遍历（ES5）|
Array.prototype.map | 映射（ES5）|
Array.prototype.filter | 过滤（ES5）|
Array.prototype.every | 检测数组是否全部符合某条件（ES5）|
Array.prototype.some | 检测数组元素中是否有元素符合指定条件（ES5）|
Array.prototype.reduce | 将数组元素计算为一个值（ES5）|
Array.prototype.indexOf | 搜索数组中的元素，并返回它所在的位置（ES5）|


# 六、函数和作用域

### 1. 创建函数——函数声明和函数表达式

```
//函数声明，会前置，随地可调用
function fnc(){}

//函数表达式,不会前置，必须先声明后调用，递归的时候用
var fnc = function(){}

//立即执行函数表达式
(function(){})()

//命名函数表达式,有名称的函数表达式，不会前置，必须先声明后调用
var func = function foo(){}

//Function构造器,比较少用,不常见
var func = new Function('a','b', console.log(a+b))
func(1,2)//3
```

### 2. this

```
//谁调用就指向谁，由调用的对象来确定this指向
this.a = 37
console.log(window.a)//37

function fn1(){
    return this
}
fn1() === window//true


function fn2(){
    'use strict'
    reutrn this
}
fn2() === undefined //true 严格模式是找不到的


//作为对象方法的函数this
var o = {
    prop: 37,
    fn: function(){
        return this.prop
    }
}
console.log(o.fn())// 37


var o = {prop: 36}
function inin(){
    return this.prop
}
o.fn = inin
console.log(o.fn())//36 谁调用就是谁


//对象原型链上的this
var o ={ fn: function(){return this.a + this.b} }
var p =Object.create(o)
p.a = 1
p.b = 2
console.log(p.fn())//3  p的原型是o, p.fn()是o上的fn 


//*构造器的this
function MyClass(){
    this.a = 1
}
var o = new MyClass()
console.log(o.a)//1  MyClass并没有返回对象{}， o通过new继承了MyClass

function Class2(){
    this.a = 2
    return {a: 3}
}
o = new Class2()
console.log(o.a)//3 由于Class2返回了对象{a:3}所以o通过new得到的是a: 3

```

### 3. claa\apply方法与this 

```
function add(c, d){
    return this.a + this.b +c +d
}
var o = {a:1, b:2}

add.call(o,3,4)//1+2+3+4=10 //call就是直接传

add.apply(o, [5, 6])//1+2+5+6=14 apply是把传入的变成数组来传

```