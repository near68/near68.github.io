---
layout: post
title:  "Javascript一些简单的基础"
date:   2017/03/03 15:03:42
categories: javascript
---
>简单基础
# 一. 数据类型
### 1. 简单数据类型
  1. bumber
  2. string
  3. boolean
  4. null
  5. undefined

### 2. 复杂数据类型
1. Object
    - Function
    - Array
    - Date
    - RegExp
### 3. 隐式类型转换

```
'123' + 0 //123,转换成number类型
123 + '' //'123',转换成string类型
'3' + 1 //'31',字符串拼接string类型
'3' - 1 //2, 转换成number类型

'1' == 1//true
null == undefined //true
0 == false //true
NaN == NaN //false，自己都不等于自己

0 === false// false
'1' === 1 //false
```

### 4. 包装对象
1. String
2. Number
3. Boolean
### 5. 类型检测
1. typeof
```
//适合基本类型和function，除了null外
typeof NaN // "number"
typeof (undefined) // "undefined"
typeof Function //"function"
typeof null // "object"
```
2. instanceof
```
//用于判断对象是否属于某构造器，判断是否有继承关系。
//Array,Date,RegExp等用于判断类型

obj instanceof Object
[] instanceof Array ===true //true

```
3. Object.prototype.toString

4. constructor

5. duck type

# 二、表达式和运算符
### 1. 表达式：

1. 原始表达式
    - 常量、直接量: 3.1415 , 'str'
    - 关键字： null , this , true
    - 变量：10 * 10  复合表达式
2. 数组、对象的初始化表达式
    - [1,2]   // 等价于new Array(1,2)
    - [1,,2]  // 等价于[1,undefined,2]
    - {a: 1, b: 2} // 等价于var a = new Object() a.a=1;a.b=2
3. 函数表达式
    - var fnc = function(){}
    - function fn(){}
    - (function(){})()
4. 属性访问表达式
    - var o = {a: 1} // o.a 或 o['a']
5. 调用表达式
    - func()
6. 对象创建表达式
    - new Func(1, 2)
    - new Object
----
### 2.运算符：

1. 一元表达式： +num 
2. 二元表达式： num1 + num2
3. 三元表达式： a ? b : c
4. 赋值： a +=1
5. 比较： a == b
6. 算术:  a - b
7. 位：a | b
8. 逻辑：exp && exp2
9. 字符串: 'a' + 'b'
10. 特殊: delete obj.a
    - var val=(1,2,3)//3  取最右
    - var obj= {a: 1} delete obj.a   obj.a //delete删除返回undefined
    - window.x = 1 'x' in window //in运算符 true
    - this
    - void 0//不管是0还是什么都返回 undefined
```
function Foo(){}
Foo.prototype.x = 1
var obj = new Foo() 
obj.x //1
obj.hasOwnProperty('x')//false 判断x是否在对象上
obj.__peoto__.hasOwnProperty('x')//true  判断x是否在原型上
 ```

# 三、语句
### 1.block语句
```
//用于组合语句,一般结合for if while之类的
{
 var a=1
 console.log(a)
}
//没有块级作用域 
  for(var i=0; i<10; i++){} 
  等于
  var i=0 
  for(; i<10; i++){}
{
  var a=1//在块外面一样可以访问
}
//function里面定义的，外面的无法访问，有函数作用域，并不是块级作用域
function(){
var a=1//外部无法访问到
}

function foo(){
var a = b = 1

}
foo()
console.log(a)//undefined  a是函数作用域内部
console.log(b)//1   b是全局，并没有var声明
```
### 2.try...catch
```
//catch或者finally必须写一个不能只有try
//也可以catch和finally都写
//catch用于捕获错误
try{
  throw "test"
}catch(ex){
  console.log(ex)
}finally{
  console.log('finally')
}

```

### 3. 函数、swich、循环
1. function
```
//函数声明，可以在它之前调用他
a()//true
function a(){}

//函数表达式，不可以在他之前调用打
b()//TypeError: b is not a function
var b = function(){}
```
2. for ... in
```
//for in遍历是不按顺序的
//受原型链影响
var obj={a: 1, b: 2}
var x
for(x in obj){

}
```
3. switch
```
//条件分支语句
var val = 2
switch(val){
    case 1:
        console.log(1);
        break;
    case 2:
        console.log(2);
        break;
    default:
        console.log(3);
        break;
}//2

switch(val){
    case 1:
        console.log(1);
    case 2:
        console.log(2);
 
    default:
        console.log(3);
}//2, 3

```